// –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
const { Telegraf, Markup } = require("telegraf");
const { createListOfAllProducts, createListOfMissingProducts } = require("./listsFormation");
const { setUpConnection } = require("./service");

// –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
require("dotenv").config();

// –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º
const commands = require("./commands");

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
const runTelegramBot = () => {
    try {
        // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        const bot = new Telegraf(process.env.BOT_TOKEN);

        // —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å—Ç–æ—Ä–∞
        const dataStore = [];

        // —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—é—â–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        function refreshConnection() {
            // —Å–±—Ä–∞—Å–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
            connection.end();
            console.log("Database connection lost");
            connection = setUpConnection();
        }

        // —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—é—â–∞—è dataStore
        function updateDataStore() {
            // –æ—á–∏—Å—Ç–∫–∞ dataStore
            dataStore.length = 0;

            // –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            connection.query("SELECT * from main", (error, result, fields) => {
                if (error) {
                    throw error;
                }

                // –ø–µ—Ä–≤–∏—á–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–æ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã main
                result.forEach((resultItem) => {
                    dataStore.push({
                        vendorCode: resultItem.vendor_code,
                        name: resultItem.name,
                        sizeType: resultItem.size_type,
                        price: resultItem.price,
                        sizeData: [],
                    });
                });
            });

            // –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã–º —Å –ø–æ–º–æ—â—å—é –¥–∂–æ–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü main & additional
            connection.query(
                "SELECT vendor_code, size, max_speed_in_14d, left_in_wb_stock, enough_for_days FROM main INNER JOIN additional ON main.id = additional.prod_id;",
                (error, result, fields) => {
                    dataStore.forEach((dataStoreItem) => {
                        result.forEach((resultItem) => {
                            if (dataStoreItem.vendorCode == resultItem.vendor_code) {
                                dataStoreItem.sizeData.push({
                                    size: resultItem.size,
                                    maxSpeedIn14d: resultItem.max_speed_in_14d,
                                    leftInWbStock: resultItem.left_in_wb_stock,
                                    enoughForDays: resultItem.enough_for_days,
                                });
                            }
                        });
                    });
                }
            );
        }

        // —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø–æ–¥–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ dataStore
        let connection = setUpConnection();
        updateDataStore();

        // –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä —Å–±—Ä–∞—Å—ã–≤–∞—é—â–∏–π —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π –Ω–æ–≤–æ–µ (10—Å–µ–∫)
        let connectionId = setTimeout(function updateConnection() {
            // —Å–±—Ä–∞—Å–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
            refreshConnection();

            // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dataStore
            updateDataStore();

            connectionId = setTimeout(updateConnection, 10000);
        }, 10000);

        // –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ dataStore
        bot.start((ctx) => {
            try {
                const firstName = ctx.message.from.first_name,
                    lastName = ctx.message.from.last_name;

                // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                refreshConnection();

                // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ dataStore
                updateDataStore();

                ctx.reply(
                    `ü§ñ–ü—Ä–∏–≤–µ—Ç ${firstName ? firstName : "–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü"} ${
                        lastName ? lastName : ""
                    }, ProductTrackingBot –≤–∫–ª—é—á—ë–Ω. \n–í Menu –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã. \n–ï—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á—ë–Ω –¥–∞–≤–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π \n/start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`
                );
            } catch (error) {
                console.log(error);
            }
        });

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help
        bot.help((ctx) => ctx.reply(commands.commands));

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã info
        bot.command("info", async (ctx) => {
            try {
                // —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –ø—Ä–∏ –ø–æ–º–æ—â–∏ reply, –≤—Ç–æ—Ä—ã–º –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await ctx.replyWithHTML(
                    "<b>–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö üéÅ</b>",

                    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    Markup.inlineKeyboard([
                        [Markup.button.callback("–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ üì¶", "btn_all_products")],
                        [Markup.button.callback("–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ üìâ", "btn_missing_products")],
                    ])
                );
            } catch (error) {
                console.error(error);
            }
        });

        // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ alert
        let alertFlag = false;

        // —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π id –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –≤ –∫–æ–º–∞–Ω–¥–µ alert
        let alertId;

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã alert - —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
        bot.command("alert", async (ctx) => {
            alertFlag = !alertFlag;

            if (alertFlag) {
                try {
                    alertId = setTimeout(async function missingProductsAlert() {
                        await ctx.reply(createListOfMissingProducts(dataStore));

                        alertId = setTimeout(missingProductsAlert, 10000);
                    });
                } catch (error) {
                    console.error(error);
                }
            } else {
                clearTimeout(alertId);
                await ctx.reply("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.");
            }
        });

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ btn_all_products
        bot.action("btn_all_products", async (ctx) => {
            try {
                //—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await ctx.answerCbQuery();

                // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ
                await ctx.replyWithHTML(`${createListOfAllProducts(dataStore)}`);
            } catch (error) {
                console.error(error);
            }
        });

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ btn_missing_products
        bot.action("btn_missing_products", async (ctx) => {
            try {
                //—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –µ—ë –æ–±—Ä–∞–±–æ—Ç–∫–µ
                await ctx.answerCbQuery();

                // —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ
                await ctx.replyWithHTML(`${createListOfMissingProducts(dataStore)}`);
            } catch (error) {
                console.error(error);
            }
        });

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        bot.on("text", async (ctx) => {
            try {
                const userText = ctx.message.text;
                await ctx.replyWithHTML(
                    `ü§ñ –£ –º–µ–Ω—è –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã ${userText}.\n–í Menu –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã.`
                );
            } catch (error) {
                await ctx.replyWithHTML(
                    `ü§ñ –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${userText}.\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.`
                );
            }
        });

        // –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot.launch();

        // –≤–∫–ª—é—á–∏—Ç—å –∏–∑—è—â–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        process.once("SIGINT", () => bot.stop("SIGINT"));
        process.once("SIGTERM", () => bot.stop("SIGTERM"));
    } catch (error) {
        console.log(error);
    }
};

// –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
runTelegramBot();
